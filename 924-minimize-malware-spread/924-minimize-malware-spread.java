class Solution {
    int[]p;
    int[]s;
    public  int findPar(int u) {
        return p[u] == u ? u : (p[u] = findPar(p[u]));
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        p=new int[n];
        s=new int[n];
        for(int i=0;i<p.length;i++){
            p[i]=i;
            s[i]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==0 || i==j)continue;
                int x=findPar(i);
                int y=findPar(j);
                if(x!=y){
                    p[x]=y;
                    s[y]+=s[x];
                }
            }
        }
        int[]infected=new int[n];
        for(int p:initial){
            int x=findPar(p);
            infected[x]++;
        }
       Arrays.sort(initial);
        int ans=initial[0];
        int pop=0;
        for(int i=0;i<initial.length;i++){
            int x=findPar(initial[i]);
            if(infected[x]==1 && s[x]>pop){
                pop=s[x];
                ans=initial[i];
            }
        }
        return ans;
        
    }
}
