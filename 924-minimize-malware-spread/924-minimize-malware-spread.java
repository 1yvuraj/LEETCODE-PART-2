class Solution {
    int[]p;
    int[]size;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        p=new int[graph.length];
        size=new int[graph.length];
        for(int i=0;i<p.length;i++){
            p[i]=i;
            size[i]=1;
        }
        for(int i=0;i<graph.length;i++)
        {
            for(int j=0;j<graph.length;j++)
            {
                if(i!=j && graph[i][j]==1){
                    int x=find(i);
                    int y=find(j);
                    union(x,y);
                }
            }
        }
        int[]componentSize=new int[graph.length];
        for(int i:initial){
            int x=find(i);
            componentSize[x]++;
        }
        Arrays.sort(initial);
        int ans_i=initial[0];
        int ans_size=0;
        
        for(int i:initial){
            int x=find(i);
            if(componentSize[x]==1 && size[x]>ans_size){
                ans_size=size[x];
                ans_i=i;
            }
        }
        return ans_i;
    }
    public int find(int x) {
        return p[x]==x?x:(p[x]=find(p[x]));
    }
    public void union(int x,int y) {
        if(size[x]>size[y]){
            p[y]=x;
        }else if(size[x]<size[y]){
             p[x]=y;
        }else{
             p[y]=x;
             size[y]++;
        }
    }
}